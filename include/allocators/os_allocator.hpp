#ifndef _ALLOCATORS_OS_ALLOCATOR_H
#define _ALLOCATORS_OS_ALLOCATOR_H

#include <allocators/base_allocator.hpp>

namespace tca {

class os_allocator : public base_allocator {
    os_allocator(const os_allocator&);                //конструктор копирования удалён.
    os_allocator& operator= (const os_allocator&);    //оператор копирования удалён.
 
    /**
     * Указывает защиту памяти.
     * 
     * @see tca::os_allocator::READ
     * @see tca::os_allocator::WRITE
     * @see tca::os_allocator::EXEC
     */
    int protect;

    /**
     * Если при вызове функции была ошибка, 
     * то она записывается в эту переменную.
     */
    int lastError;

public:
    /**
     * ###########################################################################
     *                               P R O T E C T
     * ###########################################################################
     */    

    /**
     * Защита памяти на чтение.
     */
    static const int READ   = 0x01;
    
    /**
     * Защита памяти на запись.
     */
    static const int WRITE  = 0x02;
    
    /**
     * Защита памяти на выполнение.
     */
    static const int EXEC   = 0x03;
    
    /**
     * ###########################################################################
     *                                 E R R O R S
     * ###########################################################################
     */

    /**
     * Нет ошибок.
     */
    static const int NO_ERRORS = 0x00;

    /**
     * Инициализирует аллоктор с заданной защитой памяти.
     * Защита памяти по-умолчанию разрешает чтение и запись.
     * 
     * @param protect
     *       Значение защиты пямяти.
     * 
     * @remarks
     *      Значение this->lastError устанавливается, как tca::os_allocator::NO_ERRORS
     * 
     * @see tca::os_allocator::READ
     * @see tca::os_allocator::WRITE
     * @see tca::os_allocator::EXEC
     */
    os_allocator(int protect = READ | WRITE);
    
    /**
     * Перемещяет данные из передаваемого аллокатора в текущий аллокатор.
     * 
     * @param alloc
     *      Объект, откуда будут перемещены данные.
     * 
     */
    os_allocator(os_allocator&& alloc);
    
    /**
     * Перемещяет данные из передаваемого аллокатора в текущий аллокатор.
     * 
     * @param alloc
     *      Объект, откуда будут перемещены данные.
     * 
     * @return
     *      ССылка на текущий объект.
     */
    os_allocator& operator= (os_allocator&& alloc);
    
    /**
     * Implementation defined
     * В стандартной версии ничего не делает.
     */
    ~os_allocator();
    
    /**
     * Выделяет блок пямяти размером sz
     * и возвращает на него указатель.
     * 
     * Перед тем, как функция обращяется к операционной системе, 
     * она затирает номер последней ошибки {@code this->lastError}, 
     * устанавливая значение tca::OSAllocator::NO_ERRORS
     * 
     * Если по какой-то причине память выделить не удалось, то функция возвращает nullptr,
     * а в this->lastError устанавливается значение системной ошибки.
     * 
     * @param sz
     *      Размер запрашиваемой памяти.
     * 
     * @return
     *      Указатель на выделенный блок пямяти или nullptr, если выделение памяти не удалось!
     */
    void* allocate(std::size_t sz) override;
    
    /**
     * Выделяет блок пямяти размером sz
     * и возвращает на него указатель выровненный не меньше, чем align.
     * 
     * Перед тем, как функция обращяется к операционной системе, 
     * она затирает номер последней ошибки {@code this->lastError}, 
     * устанавливая значение tca::OSAllocator::NO_ERRORS
     * 
     * Если по какой-то причине память выделить не удалось, то функция возвращает nullptr,
     * а в this->lastError устанавливается значение системной ошибки.
     * 
     * @param sz
     *      Размер запрашиваемой памяти.
     * 
     * @param align
     *      Значение выравнивания.
     * 
     * @return
     *      Указатель на выделенный блок пямяти или nullptr, если выделение памяти не удалось!
     */
    void* allocate_align(std::size_t sz, std::size_t align) override;
    
    /**
     * Возвращает память операционной системе.
     * 
     * Перед тем, как функция обращяется к операционной системе, 
     * она затирает номер последней ошибки {@code this->lastError}, 
     * устанавливая значение tca::OSAllocator::NO_ERRORS
     * 
     * Если по какой-то причине память освободить не удалось, 
     * в this->lastError устанавливается значение системной ошибки.
     * 
     * @param p
     *      Указатель на блок ранее выделенной памяти. 
     * 
     * @param sz
     *      Размер ранее выделенного блока.
     * 
     */
    void  deallocate(void* p, std::size_t sz) override;    
    
    /**
     * Возвращает значение последней ошибки, хранящуюся в {@code this->lastError}
     * 
     * @return
     *      Значение последней ошибки связанную с текущем аллокатором.
     */
    int   getLastError() const;
    
    /**
     * Возвращает указатель на строку с описанием системной ошибки.
     * Данная строка может различаться на разных операционных системах.
     * И строка зависит от реализации и версии библиотеки.
     * 
     * @param error
     *      Значение системной ошибки.
     * 
     * @return
     *      Указатель на константную строку, содержащую описание ошибки.
     */
    static const char* getErrorString(int error);
};

}

#endif//_ALLOCATORS_OS_ALLOCATOR_H