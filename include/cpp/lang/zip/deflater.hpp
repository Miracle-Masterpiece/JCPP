#ifndef CPP_LANG_ZIP_DEFLATER_H
#define CPP_LANG_ZIP_DEFLATER_H
#include <zlib.h>
#include <cstddef>

namespace jstd {

/**
 * Класс предоставляет интерфейс для сжатия данных.
 * Он реализует сжатие данных с алгоритмом DEFLATE и поддерживает управление состоянием сжатия,
 * а также возможность использования различных настроек сжатия и словарей.
 * 
 * Класс позволяет сжимать данные, записывать их в выходной буфер, а также управлять состоянием потока сжатия.
 * Он также поддерживает потоковое сжатие, где данные можно сжимать частями.
 * 
 * Класс включает статические константы для уровней сжатия:
 * 
 * {@link LEVEL_0} - Без сжатия (0).
 * {@link LEVEL_1} - Быстрое сжатие.
 * {@link LEVEL_9} - Максимальное сжатие.
 * {@link BEST_SPEED} - Оптимизация под скорость.
 * {@link BEST_COMPRESSION} - Оптимизация под максимальное сжатие.
 * {@link DEFAULT_COMPRESSION} - Стандартный уровень сжатия.
 */
class deflater {
    z_stream    m_strm;  /* Поток для сжатия, используемый zlib */
    bool        m_finished;  /* Флаг, указывающий, завершено ли сжатие */
    bool        m_finish;    /* Флаг, указывающий, что нужно завершить сжатие */

    deflater(const deflater& d) = delete;
    deflater& operator= (const deflater& d) = delete;

public:
    /**
     * Статическая константа для уровня сжатия "Без сжатия".
     */
    static const int LEVEL_0 = 0;

    /**
     * Статическая константа для уровня сжатия "Быстрое сжатие".
     */
    static const int LEVEL_1 = 1;

    /**
     * Статическая константа для уровня сжатия "Среднее сжатие".
     */
    static const int LEVEL_2 = 2;

    /**
     * Статическая константа для уровня сжатия "Хорошее сжатие".
     */
    static const int LEVEL_3 = 3;

    /**
     * Статическая константа для уровня сжатия "Еще лучше сжатие".
     */
    static const int LEVEL_4 = 4;

    /**
     * Статическая константа для уровня сжатия "Высокое сжатие".
     */
    static const int LEVEL_5 = 5;

    /**
     * Статическая константа для уровня сжатия "Очень хорошее сжатие".
     */
    static const int LEVEL_6 = 6;

    /**
     * Статическая константа для уровня сжатия "Сжатие с высокой степенью".
     */
    static const int LEVEL_7 = 7;

    /**
     * Статическая константа для уровня сжатия "Максимальное сжатие".
     */
    static const int LEVEL_8 = 8;

    /**
     * Статическая константа для уровня сжатия "Лучшее сжатие".
     */
    static const int LEVEL_9 = 9;

    /**
     * Статическая константа для уровня сжатия "Лучшее сжатие, максимальная степень".
     */
    static const int BEST_SPEED = LEVEL_1;

    /**
     * Статическая константа для уровня сжатия "Лучшее сжатие, максимальная степень".
     */
    static const int BEST_COMPRESSION = LEVEL_9;

    /**
     * Статическая константа для уровня сжатия "Стандартное сжатие".
     */
    static const int DEFAULT_COMPRESSION = -1;


    /**
     * Статическая константа, указывающая, что сжатие не завершено и не требуется выполнять сброс данных.
     * Используется для сжатия данных в поток без необходимости принудительного сброса или завершения.
     * 
     * @see #FULL_FLUSH
     * @see #FINISH
     * @see #SYNC_FLUSH
     */
    static const int NO_FLUSH = Z_NO_FLUSH;

    /**
     * Статическая константа, указывающая на необходимость полного сброса текущего блока данных.
     * При использовании этого флага данные сжимаются, но не завершаются, и поток остаётся открытым для дальнейшего добавления данных.
     * Это может быть полезно для промежуточных этапов сжатия.
     * 
     * @see #NO_FLUSH
     * @see #FINISH
     * @see #SYNC_FLUSH
     */
    static const int FULL_FLUSH = Z_FULL_FLUSH;

    /**
     * Статическая константа, указывающая, что сжатие должно быть завершено и поток должен быть закрыт.
     * Используется в конце сжатия для завершения всех операций и записи оставшихся данных в выходной поток.
     * 
     * @see #NO_FLUSH
     * @see #FULL_FLUSH
     * @see #SYNC_FLUSH
     */
    static const int FINISH = Z_FINISH;

    /**
     * Статическая константа, указывающая на необходимость синхронизации сжимаемых данных, но без полного завершения сжатия.
     * Этот флаг используется для временной остановки сжатия и обеспечения целостности данных в случае потоковой передачи.
     * После этого флага можно продолжить сжатие.
     * 
     * @see #NO_FLUSH
     * @see #FULL_FLUSH
     * @see #FINISH
     */
    static const int SYNC_FLUSH = Z_SYNC_FLUSH;

    /**
     * Конструктор класса, инициализирует поток сжатия с заданным уровнем сжатия.
     *
     * @param compressionLevel 
     *      Уровень сжатия (по умолчанию: DEFAULT_COMPRESSION).
     * 
     * Значение от 0 (без сжатия) до 9 (максимальное сжатие).
     * 
     * {@link DEFAULT_COMPRESSION} по умолчанию используется для сбалансированного сжатия.
     */
    deflater(int compressionLevel = DEFAULT_COMPRESSION);

    /**
     * Конструктор перемещения.
     * 
     * @param d 
     *      Объект, из которого осуществляется перемещение.
     */
    deflater(deflater&& d);

    /**
     * Оператор присваивания перемещением.
     * 
     * @param d 
     *      Объект, из которого происходит перемещение.
     * 
     * @return 
     *      Ссылка на текущий объект.
     */
    deflater& operator= (deflater&& d);

    /**
     * Деструктор класса.
     * Завершается поток сжатия и освобождаются все ресурсы.
     */
    ~deflater();

    /**
     * Устанавливает входные данные для сжатия.
     * 
     * @param data 
     *      Указатель на данные для сжатия.
     * 
     * @param size 
     *      Размер данных в байтах.
     */
    void set_input(const void* data, std::size_t size);

    /**
     * Выполняет сжатие данных в выходной буфер.
     * 
     * Возвращает количество данных, записанных в выходной буфер, и обновляет состояние сжатия.
     * Если сжатие завершено, то дальнейшие вызовы этого метода не будут иметь эффекта.
     * 
     * @param outBuffer 
     *      Указатель на выходной буфер для сжатых данных.
     * 
     * @param outBufferSize 
     *      Размер выходного буфера.
     * 
     * @return 
     *      Количество байт, записанных в выходной буфер.
     * 
     * @throws illegal_state_exception 
     *      Если произошла ошибка сжатия.
     */
    std::size_t deflate(void* outBuffer, std::size_t outBufferSize);

    /**
     * Выполняет сжатие данных в выходной буфер.
     * 
     * Возвращает количество данных, записанных в выходной буфер, и обновляет состояние сжатия.
     * Если сжатие завершено, то дальнейшие вызовы этого метода не будут иметь эффекта.
     * 
     * @param outBuffer 
     *      Указатель на выходной буфер для сжатых данных.
     * 
     * @param outBufferSize 
     *      Размер выходного буфера.
     * 
     * @param flush_type
     *      Тип сбрасывания данных.
     * 
     * @return 
     *      Количество байт, записанных в выходной буфер.
     * 
     * @throws illegal_state_exception 
     *      Если произошла ошибка сжатия.
     */
    std::size_t deflate(void* outBuffer, std::size_t outBufferSize, int flush_type);

    /**
     * Проверяет, нужны ли дополнительные входные данные для сжатия.
     * 
     * @return `true`, если данные для сжатия закончились и требуется новый вход, иначе `false`.
     */
    bool needs_input() const;

    /**
     * Проверяет, завершено ли сжатие данных.
     * 
     * @return true, если сжатие завершено, иначе false.
     */
    bool is_finished() const;

    void finish();

    /**
     * Сбрасывает состояние сжатия, позволяя начать сжатие заново.
     */
    void reset();

    /**
     * Устанавливает словарь для сжатия.
     * 
     * Позволяет ускорить сжатие в случаях, когда известно, что данные имеют схожие элементы.
     * 
     * @param dict 
     *      Указатель на данные словаря.
     * 
     * @param dictLength 
     *      Длина словаря в байтах.
     */
    void set_dictionary(const void* dict, size_t dictLength);
};


};

#endif//CPP_LANG_ZIP_DEFLATER_H