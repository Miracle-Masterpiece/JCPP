#ifndef _JSTD_CPP_LANG_IO_FILEINPUTSTREAM_H_
#define _JSTD_CPP_LANG_IO_FILEINPUTSTREAM_H_

#include <cpp/lang/io/istream.hpp>
#include <cpp/lang/io/file.hpp>
#include <cstdio>

namespace jstd {

/**
 * Класс предназначен для чтения из файла.
 * 
 * @remark
 *      Копирование и присваивание запрещены, чтобы избежать неожиданных побочных эффектов.  
 */
class ifstream : public istream {
    FILE*   _handle;        //указатель на файл.
    //Любой ценой это значение должно указывать, сколько байт можно считать из файла.
    //Просто, чёрт возьми, убейте меня...
    int64_t _available;     //сколько байт -доступно- для чтения.
public:
    /**
     * Создаёт пустой файловый поток.
     */
    ifstream();
    
    /**
     * Создаёт поток по указанному пути.
     * @param path  Путь к файлу.
     * @param path_length   Необязательный параметр, обозначающий длину строки path. 
     *                      Если значение -1, длина строки вычислится автоматически, но строка должна оканчиваться на \0.
     * 
     * @throws file_not_found_exception 
     *          Если файла не существует.
     * 
     * @throws io_exception 
     *          Если произошла ошибка ввода/вывода.
     * 
     * @throws sequrity_exception 
     *          Если чтение из файла запрещено.
     */
    ifstream(const char* path, int path_length = -1);
    
    /**
     * Создаёт поток по объекту файла.
     * @param file  Объект, описыващий файл.
     * 
     * @throws file_not_found_exception 
     *          Если файла не существует.
     * 
     * @throws io_exception 
     *          Если произошла ошибка ввода/вывода.
     * 
     * @throws sequrity_exception 
     *          Если чтение из файла запрещено.
     */
    ifstream(const file& file);
    
    //Перемещение
    ifstream(ifstream&&);
    
    //Перемещение
    //@throws io_exception если при закрытии произошла ошибка.
    /**
     * @throws io_exception 
     *          Если произошла ошибка ввода/вывода.
     */
    ifstream& operator= (ifstream&&);
    
    /**
     * Если не был вызван метод this->close(), 
     * то вызывает его, но игнорирует любые исключения.
     */
    ~ifstream();
    
    /**
     * Читает один байт из потока.
     * 
     * @return Значение прочитанного байта (0–255) или -1, если достигнут конец потока.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода.
     *                      Если поток не был открыт.
     */
    int read();
    
    /**
     * Читает sz байт из потока в передаваемый буфер.
     * 
     * @param buf   Буфер в который будут записаны данные.
     * @param sz    Сколько байт нужно считать из потока.
     * 
     * @return      Фактическое количество считанных байт.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода.
     *                      Если поток не был открыт.
     */
    int64_t read(char buf[], int64_t sz);
    
    /**
     * Пропускает n байт из потока.
     * @param n Сколько байт нужно пропустить.
     * @return Фактическое кол-во пропущенных байт.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода.
     *                      Если поток не был открыт.
     */
    int64_t skip(int64_t n = 1);
    
    /**
     * @brief Возвращает количество доступных для чтения байт.
     * 
     * Позволяет узнать, сколько данных можно прочитать из этого потока.
     * 
     * @return Количество доступных байт в потоке.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода
     *                      Если поток не был открыт.
     */
    int64_t available() const;
    
    /**
     * Закрывает поток файла.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода.
     *                      Если попытка закрыть поток второй раз.
     *                      Если поток не был открыт.
     */                     
    void close();
};

}
#endif//_JSTD_CPP_LANG_IO_FILEINPUTSTREAM_H_
