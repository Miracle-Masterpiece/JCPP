#ifndef _JSTD_CPP_LANG_IO_ISTREAM_H_
#define _JSTD_CPP_LANG_IO_ISTREAM_H_
#include <cstdint>
namespace jstd{

/**
 * @brief Абстрактный класс для работы с потоками ввода.
 * 
 * input_stream предоставляет базовый интерфейс для чтения данных из потока.  
 * Копирование и присваивание запрещены, чтобы избежать неожиданных побочных эффектов.  
 * Класс предназначен для наследования и реализации конкретных источников данных.
 */
class istream {
    istream(const istream&)               = delete;  // Копирование запрещено.
    istream& operator= (const istream&)   = delete;  // Присваивание запрещено.
public:
    
    istream() {}
    
    /**
     * Читает один байт из потока.
     * 
     * @return 
     *      Значение прочитанного байта (0–255) или -1, если достигнут конец потока.
     * 
     * @throws io_exception 
     *      Если произошла ошибка ввода/вывода
     */
    virtual int read();

    /**
     * Читает несколько байт из потока.
     * 
     * Заполняет переданный буфер данными из потока, но не более чем sz байт.
     * 
     * @param buf 
     *      Указатель на буфер, в который будут записаны данные.
     * 
     * @param sz 
     *      Максимальное количество байт для чтения.
     * 
     * @return 
     *      Количество реально прочитанных байт или -1, если достигнут конец потока.
     * 
     * @throws io_exception 
     *      Если произошла ошибка ввода/вывода
     */
    virtual int64_t read(char buf[], int64_t sz) = 0;

    /**
     * @brief Пропускает указанное количество байт во входном потоке.
     * 
     * Позволяет пропустить ненужные данные, не загружая их в память.
     * @param n Количество байт для пропуска. Если n < 0, поведение определяется реализацией.
     * @return Количество фактически пропущенных байт.
     * @throws io_exception Если произошла ошибка ввода/вывода
     */
    virtual int64_t skip(int64_t n = 1);

    /**
     * @brief Возвращает количество доступных для чтения байт.
     * 
     * Позволяет узнать, сколько данных можно прочитать из этого потока.
     * 
     * @return Количество доступных байт в потоке.
     * 
     * @throws io_exception Если произошла ошибка ввода/вывода
     */
    virtual int64_t available() const = 0;

    /**
     * @brief Виртуальный деструктор.
     * 
     * Обеспечивает корректное удаление объектов производных классов, а так же закрытие потока.
     */
    virtual ~istream();

    /**
     * @brief Закрывает поток.
     * @throws io_exception Если произошла ошибка ввода/вывода
     */
    virtual void close() = 0;
};

}
#endif//_JSTD_CPP_LANG_IO_ISTREAM_H_

