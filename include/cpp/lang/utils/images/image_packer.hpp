#ifndef JSTD_CPP_LANG_UTILS_IMAGES_IMAGE_PACKER_H
#define JSTD_CPP_LANG_UTILS_IMAGES_IMAGE_PACKER_H

#include <allocators/base_allocator.hpp>
#include <cpp/lang/utils/unique_ptr.hpp>
#include <cpp/lang/utils/hash_map.hpp>
#include <cpp/lang/array.hpp>
#include <cpp/lang/ustring.hpp>
#include <cstdint>

namespace jstd {

namespace texturing {
    class node;
}

class image;
/**
 * Класс для упаковки набора изображений в текстурный атлас.
 * 
 * Класс используется для генерации текстурного атласа на основе входного массива изображений.
 * Позволяет масштабировать атлас и управлять размещением изображений с помощью структуры дерева.
 * Поддерживает кастомные аллокаторы для оптимального управления памятью.
 */
class image_packer {
    
    /**
     * Основной аллокатор для внутренних нужд.
     */
    tca::allocator*        m_allocator;
    
    /**
     * Аллокатор для узлов дерева размещения (node).
     */
    tca::allocator*        m_node_allocator;
    
    /**
     * Корневой узел дерева размещения изображений.
     */
    unique_ptr<texturing::node> m_root;
    
    /**
     * Входной массив изображений.
     */
    array<const image>          m_images;
    
    /**
     * Ширина выходного изображения (атласа).
     */
    int32_t                     m_width;
    
    /**
     * Высота выходного изображения (атласа).
     */
    int32_t                     m_height;

    /**
     * Внутренний метод для построения дерева размещения.
     * Используется для размещения всех изображений во внутреннем представлении дерева.
     */
    void create_tree();

public:
    /**
     * Структура, представляющая координаты изображения в атласе.
     * 
     * Все координаты заданы в пикселях относительно результирующего изображения (атласа).
     */
    struct uv {
        int32_t u0; // Левая граница (X) изображения в атласе.
        int32_t v0; // Верхняя граница (Y) изображения в атласе.
        int32_t u1; // Правая граница (X) изображения в атласе.
        int32_t v1; // Нижняя граница (Y) изображения в атласе.
    };

    /**
     * Создаёт пустой объект image_packer.
     */
    image_packer();

    /**
     * @param img_array 
     *      Указатель на массив входных изображений.
     * 
     * @param 
     *      count_images Количество изображений во входном массиве.
     * 
     * @note
     *      Если изначально заданные размеры атласа недостаточны, они будут увеличены до минимальных возможных, чтобы вместить все изображения.
     * 
     * @param w 
     *      Начальная ширина выходного атласа.
     * 
     * @param h 
     *      Начальная высота выходного атласа.
     * 
     * @param allocator 
     *      Аллокатор для внутренних нужд.
     * 
     * @param node_allocator 
     *      Аллокатор для размещения узлов дерева. Может быть nullptr — в этом случае используется основной аллокатор.
     *      Лучше использовать какой-то пул аллокатор на размер sizeof(texturing::node), поскольку этот аллокатор выделяет только этот размер!
     */
    image_packer(const image* img_array, int32_t count_images, int32_t w, int32_t h,
                 tca::allocator* allocator = tca::get_scoped_or_default(), tca::allocator* node_allocator = tca::get_scoped_or_default());

    /**
     * Конструктор перемещения.
     */
    image_packer(image_packer&&);

    /**
     * Оператор перемещения.
     * 
     * @return 
     *      Ссылка на этот же объект.
     */
    image_packer& operator=(image_packer&&);

    /**
     * 
     */
    ~image_packer();

    /**
     * Выполняет упаковку изображений в атлас.
     * 
     * Метод строит текстурный атлас, размещая изображения с возможным масштабированием.
     * 
     * @param scale_factor 
     *      Коэффициент масштабирования (делитель). 
     *      Изображения уменьшаются перед размещением в атласе.
     *      Это уменьшает визуальные артефакты (например, bleeding) и позволяет создать атлас меньшего размера.
     * 
     * @param out_image_channels 
     *      Количество цветовых каналов в выходном изображении. По умолчанию 4 (RGBA).
     * 
     * @return 
     *      Сформированное изображение — текстурный атлас, содержащий все входные изображения.
     */
    image pack(int32_t scale_factor = 1, int32_t out_image_channels = 4);

    /**
     * Возвращает массив координат (uv) всех изображений в атласе. 
     * Индексация uv соответствует порядку изображений в входном массиве — т.е. 
     * 
     * @return 
     *      Массив структур uv с координатами каждого изображения.
     * 
     * Для выделения памяти под массив используется внутренний m_allocator
     */
    array<uv> get_uv() const;
};


}

#endif//JSTD_CPP_LANG_UTILS_IMAGES_IMAGE_PACKER_H